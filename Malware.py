import os
import getpass
import sys
import requests
import socket
import time
from getmac import get_mac_address


def start_monitoring_client():
    """
    Initializes and runs the device monitoring client.

    This function contains all the necessary logic, including configuration,
    the heartbeat sending mechanism, and the main loop.
    """
    # --- Configuration: Change this URL to your server's IP address ---
    SERVER_URL = "http://192.168.0.226:5001/heartbeat"
    HEARTBEAT_INTERVAL = 5  # seconds

    def send_heartbeat():
        """Gets device info and sends it to the tracking server."""
        try:
            # Get device name and MAC address
            device_name = socket.gethostname()
            mac_address = get_mac_address()

            if not mac_address:
                print("Error: Could not retrieve MAC address.")
                return

            payload = {
                "device_name": device_name,
                "mac_address": mac_address
            }

            # Send the data as a POST request with a timeout
            response = requests.post(SERVER_URL, json=payload, timeout=10)
            # Raise an exception for bad status codes (e.g., 404, 500)
            response.raise_for_status()

            print(f"[{time.ctime()}] Heartbeat sent successfully.")

        except requests.exceptions.RequestException as e:
            # Handle network-related errors (e.g., server is down)
            print(f"Error: Could not connect to the server. Details: {e}")
        except Exception as e:
            # Handle other potential errors
            print(f"An unexpected error occurred: {e}")

    # --- Main Loop ---
    print(f"--- Device Monitoring Client ---")
    print(f"Sending heartbeat to {SERVER_URL} every {HEARTBEAT_INTERVAL} seconds.")
    print("Press Ctrl+C to stop.")

    while True:
        send_heartbeat()
        time.sleep(HEARTBEAT_INTERVAL)

#this function run itself every time the pc was restarted
def create_startup_batch(script_path=None, batch_name="run_on_startup.bat"):
    user = getpass.getuser()
    if script_path is None:
        script_path = os.path.abspath(sys.argv[0])
    python_path = sys.executable
    startup_folder = rf"C:\Users\{user}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
    batch_file_path = os.path.join(startup_folder, batch_name)

    if not os.path.exists(batch_file_path):
        # Using cmd /k to keep the terminal open after script execution
        batch_cmd = f'cmd /k "{python_path} {script_path}"'
        with open(batch_file_path, "w") as bat_file:
            bat_file.write(batch_cmd)
        print(f"Batch file created at: {batch_file_path}")
    else:
        print(f"Batch file already exists at: {batch_file_path}")


if __name__ == "__main__":
    start_monitoring_client()